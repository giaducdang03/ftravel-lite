// <auto-generated />
using System;
using FTravel.Repository.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FTravel.Repository.Migrations
{
    [DbContext(typeof(FtravelLiteContext))]
    partial class FtravelLiteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FTravel.Repository.EntityModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UnsignName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__City__3214EC07C67B929F");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Notifica__3214EC07FB2BB517");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Order__3214EC077B4E0DAE");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("UnitPrice")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__OrderDet__3214EC0722A0C253");

                    b.HasIndex("OrderId");

                    b.HasIndex("TicketId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Otp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__Otp");

                    b.ToTable("Otp", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("EndPoint")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StartPoint")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UnsignName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__Route__3214EC076D3E3823");

                    b.HasIndex("EndPoint");

                    b.HasIndex("StartPoint");

                    b.ToTable("Route", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.RouteStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<int?>("StationIndex")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__RouteSta__3214EC07003F60C2");

                    b.HasIndex("RouteId");

                    b.HasIndex("StationId");

                    b.ToTable("RouteStation", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DefaultPrice")
                        .HasColumnType("int");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("UnsignName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__Service__3214EC0758760C60");

                    b.HasIndex("RouteId");

                    b.HasIndex("StationId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.ServiceTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__ServiceT__3214EC07E7FD96DF");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TicketId");

                    b.ToTable("ServiceTicket", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UnsignName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__Station__3214EC076CCE1564");

                    b.HasIndex("CityId");

                    b.ToTable("Station", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SeatCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TicketTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__Ticket__3214EC0720D026DC");

                    b.HasIndex("TicketTypeId");

                    b.HasIndex("TripId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__TicketTy__3214EC07BF501A49");

                    b.HasIndex("RouteId");

                    b.ToTable("TicketType", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Transact__3214EC074E82A4E2");

                    b.HasIndex("OrderId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EstimatedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimatedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTemplate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("OpenTicketDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UnsignName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__Trip__3214EC07FAD9A29D");

                    b.HasIndex("RouteId");

                    b.ToTable("Trip", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.TripService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("ServicePrice")
                        .HasColumnType("int");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__TripServ__3214EC07FBCF2CC6");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TripId");

                    b.ToTable("TripService", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.TripTicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("TicketTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__TripTick__3214EC07B3BF44EC");

                    b.HasIndex("TicketTypeId");

                    b.HasIndex("TripId");

                    b.ToTable("TripTicketType", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ConfirmEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Fcmtoken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FCMToken");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Pin")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("PIN");

                    b.Property<string>("Role")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UnsignFullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__User__3214EC07C0410F19");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountBalance")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Wallet__3214EC07DC2620DF");

                    b.HasIndex("UserId");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Notification", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__UserI__48CFD27E");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Order", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.OrderDetail", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderDeta__Order__0C85DE4D");

                    b.HasOne("FTravel.Repository.EntityModels.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__OrderDeta__Ticke__0B91BA14");

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Route", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.City", "EndPointNavigation")
                        .WithMany("RouteEndPointNavigations")
                        .HasForeignKey("EndPoint")
                        .HasConstraintName("FK__Route__EndPoint__4E88ABD4");

                    b.HasOne("FTravel.Repository.EntityModels.City", "StartPointNavigation")
                        .WithMany("RouteStartPointNavigations")
                        .HasForeignKey("StartPoint")
                        .HasConstraintName("FK__Route__StartPoin__4D94879B");

                    b.Navigation("EndPointNavigation");

                    b.Navigation("StartPointNavigation");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.RouteStation", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.Route", "Route")
                        .WithMany("RouteStations")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK__RouteStat__Route__59063A47");

                    b.HasOne("FTravel.Repository.EntityModels.Station", "Station")
                        .WithMany("RouteStations")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__RouteStat__Stati__59FA5E80");

                    b.Navigation("Route");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Service", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.Route", "Route")
                        .WithMany("Services")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK__Service__RouteId__73BA3083");

                    b.HasOne("FTravel.Repository.EntityModels.Station", "Station")
                        .WithMany("Services")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__Service__Station__74AE54BC");

                    b.Navigation("Route");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.ServiceTicket", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.Service", "Service")
                        .WithMany("ServiceTickets")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__ServiceTi__Servi__7D439ABD");

                    b.HasOne("FTravel.Repository.EntityModels.Ticket", "Ticket")
                        .WithMany("ServiceTickets")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__ServiceTi__Ticke__7E37BEF6");

                    b.Navigation("Service");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Station", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.City", "City")
                        .WithMany("Stations")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Station_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Ticket", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.TicketType", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .HasConstraintName("FK__Ticket__TicketTy__6EF57B66");

                    b.HasOne("FTravel.Repository.EntityModels.Trip", "Trip")
                        .WithMany("Tickets")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK__Ticket__TripId__6E01572D");

                    b.Navigation("TicketType");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.TicketType", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.Route", "Route")
                        .WithMany("TicketTypes")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK__TicketTyp__Route__6383C8BA");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Transaction", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Transaction__Order");

                    b.HasOne("FTravel.Repository.EntityModels.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Transacti__Walle__160F4887");

                    b.Navigation("Order");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Trip", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.Route", "Route")
                        .WithMany("Trips")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK__Trip__RouteId__5EBF139D");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.TripService", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.Service", "Service")
                        .WithMany("TripServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__TripServi__Servi__787EE5A0");

                    b.HasOne("FTravel.Repository.EntityModels.Trip", "Trip")
                        .WithMany("TripServices")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK__TripServi__Servi__778AC167");

                    b.Navigation("Service");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.TripTicketType", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.TicketType", "TicketType")
                        .WithMany("TripTicketTypes")
                        .HasForeignKey("TicketTypeId")
                        .HasConstraintName("FK__TripTicke__Ticke__693CA210");

                    b.HasOne("FTravel.Repository.EntityModels.Trip", "Trip")
                        .WithMany("TripTicketTypes")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK__TripTicke__TripI__68487DD7");

                    b.Navigation("TicketType");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Wallet", b =>
                {
                    b.HasOne("FTravel.Repository.EntityModels.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Wallet_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.City", b =>
                {
                    b.Navigation("RouteEndPointNavigations");

                    b.Navigation("RouteStartPointNavigations");

                    b.Navigation("Stations");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Route", b =>
                {
                    b.Navigation("RouteStations");

                    b.Navigation("Services");

                    b.Navigation("TicketTypes");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Service", b =>
                {
                    b.Navigation("ServiceTickets");

                    b.Navigation("TripServices");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Station", b =>
                {
                    b.Navigation("RouteStations");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Ticket", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ServiceTickets");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.TicketType", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("TripTicketTypes");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Trip", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("TripServices");

                    b.Navigation("TripTicketTypes");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("FTravel.Repository.EntityModels.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
